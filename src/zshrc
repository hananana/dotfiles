# zmodload zsh/zprof && zprof

autoload -Uz compinit
compinit

# PATHの重複登録を防ぐ
typeset -gU PATH

# export {{{

export PATH=$PATH:$HOME/.dotfiles/bin
export PATH=$PATH:$HOME/.dotnet/tools
export PATH=$PATH:$HOME/.local/bin

export EDITOR='nvim'
export DOTDIR=$HOME/src/github.com/hananana/dotfiles
export DOTNET_ROOT=/usr/local/share/dotnet

# hub brose向けの設定
case ${OSTYPE} in
    linux*)
        export BROWSER='/mnt/c/Program\ Files/Google/Chrome/Application/chrome.exe'
        ;;
esac

# Java_HOME
case ${OSTYPE} in
    darwin*)
        export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) ;;
esac

# }}}
#  history {{{
# https://github.com/sorin-ionescu/prezto/blob/master/modules/history/init.zsh
# }}}
# Variables {{{

HISTFILE="${ZDOTDIR:-$HOME}/.zhistory"       # The path to the history file.
HISTSIZE=10000                   # The maximum number of events to save in the internal history.
SAVEHIST=10000                   # The maximum number of events to save in the history file.
# }}}
# setopt {{{

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt HIST_BEEP 
setopt PROMPT_SUBST
setopt no_beep
setopt correct
setopt magicequalsubst
setopt auto_list
setopt auto_menu

# }}}
# completion {{{

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# }}}
# prompt {{{

function remove_merged_branch() {
    git branch --merged | egrep -v '\*|develop|master' | xargs git branch -d
}

function random_glyphs() {
    local glyphs=(
        ' '
        ' '
        ' '
        ' '
        ' '
        ' '
    )
    local ran=$(($(od -vAn -N4 -tu4 < /dev/random) % 6))
    echo $glyphs[$(($ran + 1))]
}

function show_git_info_if_needed() {
    if [ -e $PWD/.git ] || git rev-parse --is-inside-work-tree > /dev/null 2>&1
    then
        branch=$(git branch | grep '*' | awk -F '*' '{ print $2 }')
        echo '%F{255}%f%K{255}%F{000}  '$branch' %k%f%F{255}%f'
    fi
}

PROMPT=' $(random_glyphs) $PWD $(show_git_info_if_needed)  '

# }}}
# zgen {{{
if ! [ -e ${HOME}/.zgen ]; then
    git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"
fi

# load zgen
source "${HOME}/.zgen/zgen.zsh"

if ! zgen saved; then
    zgen load b4b4r07/enhancd
    ENHANCD_HOOK_AFTER_CD=l
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load RobSis/zsh-completion-generator
    zgen load zsh-users/zsh-completions
    zgen save
fi

# for zsh-completion-generator
# for completion of hub command
if [ ! -e $HOME/.zsh/completions/_hub ]
then
    mkdir -p $HOME/.zsh/completions
    wget https://raw.githubusercontent.com/github/hub/master/etc/hub.zsh_completion -O $HOME/.zsh/completions/_hub
fi

fpath=(~/.zsh/completions $fpath)

# }}}
# keybind alias function {{{

# wsl限定
if [ -f /proc/version ] && grep -qi microsoft /proc/version; then
    # WSLの場合の設定
    alias vim='/mnt/c/Users/hananana/scoop/apps/neovide/0.13.3/neovide.exe'
    alias dotnet='/mnt/c/Program\ Files/dotnet/dotnet.exe'
    alias adb='/mnt/c/Program\ Files/Unity/Hub/Editor/2020.3.34f1/Editor/Data/PlaybackEngines/AndroidPlayer/SDK/platform-tools/adb.exe'
fi

# ls
alias l='ls -laF'

# git
alias g='git'
alias gf='git fetch --prune'
alias gfp='git fetch --prune'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gcb='git checkout -b'
alias gco='git checkout'
alias gd='git diff'
alias gl='git pull --prune'
alias gm='git merge'
alias gp='git push'
alias gpu='git push -u origin $(git-current-branch-name)'
alias gst='git status'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'

# tree
alias tree="tree -NC" # N: 文字化け対策, C:色をつける

# tmux
alias tmux="TERM=screen-256color-bce tmux"

# mux
alias mux="tmuxinator"

# vim
alias vim='nvim'

#open
case ${OSTYPE} in
    darwin*)
        alias o='open'
        ;;
    linux*)
        alias o='explorer.exe'
        ;;
esac

# 現在のbranch取得
function git-current-branch-name() {
    git branch | grep '^\*' | sed 's/^\* *//'
}

#アプリを終了させる
function kill_process () {
    ps -ef | fzy | awk '{ print $2 }' | xargs kill
    zle clear-screen
}

# ハッシュを絞り込む
function git_hash(){                                    
    git log --oneline --branches | fzy | awk '{print $1}'
}  

# pathをみやすく
function show_path(){
      echo -e ${PATH//:/'\n'}
}

# gitグラフ描画
function graph {
	git log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)― %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
}

# gitのrootに移動
function cd_gitroot() {

  local option OPTARG OPTIND
  while getopts ':h' option; do
    case $option in
      h)
        cdgitroot_print_usage
        return 0
        ;;
      :)
        cdgitroot_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        cdgitroot_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    cdgitroot_print_error "Not in a git repository"
    return 1
  fi

  local relative_path="$1"
  local root_path=$(git rev-parse --show-toplevel)

  if [ -n "$relative_path" ]; then
    cd "$root_path/$relative_path"
  else
    cd "$root_path"
  fi
}

# ヒストリを絞り込む
function fzy_history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        fzy --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N fzy_history
bindkey '^r' fzy_history 

function cdg() {
    builtin cd $(ghq list -p | fzy)
}

function fzy_branch() {
    git branch -a --sort=-authordate | cut -b 3- | perl -pe 's#^remotes/origin/###' | perl -nlE 'say if !$c{$_}++' | grep -v -- "->" | fzy | read temp_branch
    BUFFER+=$temp_branch
    zle clear-screen
}

function fix_resolution_files() {
    dir="${PWD}"
    find $dir -name "*.csproj" | xargs sed -i 's/C:/\\mnt\\c/g'
}

zle -N fzy_branch
bindkey '^g' fzy_branch

function fzy_any_recursive() {
    rg --files | fzy | read temp_any
    BUFFER+=$temp_any
    zle clear-screen
}

zle -N fzy_any_recursive
bindkey '^f' fzy_any_recursive

function update_symlink() {
    rm -rf $HOME/.vimrc
    ln -s $DOTDIR/src/vimrc $HOME/.vimrc
    rm -rf $HOME/.vim
    ln -s $DOTDIR/src/vim $HOME/.vim
    rm -rf $HOME/.commit_template.txt
    ln -s $DOTDIR/src/commit_template.txt $HOME/.commit_template.txt
    rm -rf $HOME/.gitconfig
    ln -s $DOTDIR/src/gitconfig $HOME/.gitconfig
    rm -rf $HOME/.gitignore_global
    ln -s $DOTDIR/src/gitignore_global $HOME/.gitignore_global
    rm -rf $HOME/.tigrc
    ln -s $DOTDIR/src/tigrc $HOME/.tigrc
    rm -rf $HOME/.tmuxinator
    ln -s $DOTDIR/src/tmuxinator $HOME/.tmuxinator
    rm -rf $HOME/.uncrustifyconfig
    ln -s $DOTDIR/src/uncrustifyconfig $HOME/.uncrustifyconfig
    rm -rf $HOME/.gvimrc
    ln -s $DOTDIR/src/gvimrc $HOME/.gvimrc

    rm -rf $HOME/.tmux.conf
    case ${OSTYPE} in
        darwin*)
            ln -s $DOTDIR/src/tmux.conf.ubuntu $HOME/.tmux.conf
            ;;
        linux*)
            ln -s $DOTDIR/src/tmux.conf $HOME/.tmux.conf
            ;;
    esac
}

function ggl() {
    local str opt
    if [ $# != 0 ]; then
        for i in $*; do
            str="$str+$i"
        done
        str=`echo $str | sed 's/^\+//'`
        opt='search?num=50&hl=ja&lr=lang_ja'
        opt="${opt}&q=${str}"
    fi
    w3m http://www.google.co.jp/$opt
}

function install_vim() {
    becho 'Install vim...'
    startDir=$PWD
    vimDir=$(ghq root)/github.com/vim/vim
    if [ -e $vimDir ] 
    then
        becho 'found vim src...!'
    else
        ghq get vim/vim
    fi

    becho 'git pull'
    builtin cd $vimDir/src
    git pull origin master > /dev/null 2>&1

    vimTag=$(git tag | tail -n 1)
    becho 'newest tag is '$vimTag
    git checkout $vimTag > /dev/null 2>&1

    becho 'make distclean'
    make distclean
    becho 'configure...!'
    ./configure --enable-fail-if-missing --enable-pythoninterp --enable-rubyinterp --enable-terminal --enable-multibyte --enable-fontset --enable-cscope
    becho 'make'
    sudo make
    becho 'make install'
    sudo make install
    builtin cd $startDir
    becho 'ready to vim!!!!!'
}

function install_check() {
    becho 'not implemented'
#     rg check
#     fzy check
#     vint check
# tmux check
# tmuxinator check
# python check
# go check
# ghq check
# vim check
# vint 
# shell check
# hub
# tig
# ruby
# gem
# mono
# zsh
# anyenv
# w3m
# goenv
# ls-go
}


function alc() {
    if [ $ != 0 ]
    then
        w3m "http://eow.alc.co.jp/$*/UTF-8/?ref-sa"
    fi
}

# blue bold echo
function becho() {
    echo -e "\033[1;34m$1\033[0;39m"
}

# red bold echo
function recho() {
    echo -e "\033[1;31m$1\033[0;39m"
}
# }}}

# pyenv

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"


# if (which zprof > /dev/null)
# then
#     zprof | less
# fi
