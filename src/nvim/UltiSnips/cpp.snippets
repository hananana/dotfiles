snippet header_normal "普通のヘッダー"
//
//  $1.h
//
//  Created by hananana
//

#ifndef __$1__
#define __$1__

#include "cocos2d.h"

class $1 : public $2
{
public:
    static $1* create();
protected:
    virtual bool init() override;
};

#endif /* defined(__$1__) */
endsnippet

snippet imp_normal "普通のcppファイル"
//
//  $1.cpp
//
//  Created by hananana
//

#include "$1.h"

USING_NS_CC;

$1 *$1::create() {
    auto instance = new $1();
    if (instance && instance->init()) {
        instance->autorelease();
        return instance;
    } else {
        CC_SAFE_DELETE(instance);
        return nullptr;
    }
}

bool $1::init() {
    if (!$2::init()) {
        return false;
    }

    return true;
}
endsnippet

snippet header_singleton "シングルトンのヘッダー"
//
//  $1.h
//
//  Created by hananana
//

#ifndef __$1__
#define __$1__

#include "cocos2d.h"

class $1 
{
public:
    static $1* getInstance();
    $1(const $1 &r) = delete;
    $1& operator=(const $1 &r) = delete;

private:
    $1();
    ~$1();
};

#endif /* defined(__$1__) */
endsnippet

snippet imp_singleton "シングルトンのcpp"
//
//  $1.cpp
//
//  Created by hananana
//

#include "$1.h"
USING_NS_CC;

$1::$1(){}
$1::~$1(){}

$1* $1::getInstance()
{
    static $1 instance;
    return &instance;
}
endsnippet

snippet lambda "ラムダ"
[$1]($2){$3}
endsnippet

snippet lambda_listener "EventListenerのラムダ"
[$1](Touch* touch, Event* event){$2}
endsnippet

snippet logxy "CCLOGのxy"
CCLOG("x:%f, y:%f", $1, $2);
endsnippet
